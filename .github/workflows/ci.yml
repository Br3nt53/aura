name: CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint_test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          python -m pip install pytest ruff black mypy
          python -m pip install pandas motmetrics pyyaml

      - name: Run unified checks
        env:
          AURA_CI_NO_SMOKE: "0"
          AURA_CI_STRICT_SMOKE: "0"
        run: |
          python .github/scripts/ci_checks.py

  docker_smoke:
    if: false
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint_test]
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: docker build -t aura-ci .

      - name: Smoke run (ROS inside container)
        run: |
          docker run --rm aura-ci /bin/bash -lc '
            set -e
            . /opt/ros/humble/setup.bash || true
            if [ -f "ros2_ws/install/local_setup.bash" ]; then . ros2_ws/install/local_setup.bash; fi

            mkdir -p out/tmp
            python3 tools/run_single.py               --scenario scenarios/crossing_targets.yaml               --out out/tmp/metrics.json

            python3 - <<'"'"'PY2'"'"'
import json, os, sys
p = "out/tmp/metrics.json"
if not os.path.exists(p):
    print("metrics.json not produced", file=sys.stderr); sys.exit(1)
m = json.load(open(p))
mota = float(m.get("mota", 0.0))
assert 0.0 <= mota <= 1.0, f"MOTA out of range: {mota}"
print("MOTA OK:", mota)
PY2
          '
